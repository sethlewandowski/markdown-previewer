{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","initalState","App","state","text","handleChange","a","setState","target","value","__html","marked","this","breaks","sanitize","className","id","onChange","dangerouslySetInnerHTML","getMarkdownText","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,uKCMrCC,EAAW,4wBA2EFC,E,4MA5CbC,MAAM,CACJC,KAAMH,G,EAGRI,aAAe,SAACC,GACd,EAAKC,SAAS,CACZH,KAAME,EAAEE,OAAOC,S,gEAMjB,MAAO,CAAEC,OADSC,IAAOC,KAAKT,MAAMC,KAAM,CAACS,QAAQ,O,+BAI3C,IACDT,EAAQQ,KAAKT,MAAbC,KAEUO,IAAOP,EAAM,CAACU,UAAU,IAEzC,OACE,yBAAKC,UAAU,cACb,yBAAKC,GAAG,QAAQD,UAAU,UACxB,iDAEF,yBAAKA,UAAU,OACb,yBAAKC,GAAG,WAAWD,UAAU,sBAC3B,8CACA,8BAAUA,UAAU,eAAeC,GAAG,SAASP,MAAOL,EAAMa,SAAUL,KAAKP,gBAE7E,yBAAKW,GAAG,SAASD,UAAU,sBACzB,0CACA,yBAAKA,UAAU,mBACb,yBAAKC,GAAG,UAAUE,wBAAyBN,KAAKO,uBAItD,uBAAGJ,UAAU,UAAb,MAAyB,uBAAGK,KAAK,mCAAR,0B,GAtCfC,IAAMC,WCxBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c4405f35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport marked from 'marked';\n\n\nconst initalState = `\n  Welcome to markdown previewer.\n\n  ## Code blocks\n  \\`\\`\\`\n  const getFunky = (you) => {\n    you ? 'lets boogie' : 'maybe next time, pal.'\n  }\n  \\`\\`\\`\n\n  ## Block Codes... or Quote's is it?\n\n  > They say time stands still...\n  > Until the author stands ill..\n  > Or perhaps time sits on the sil...\n  > Until it's had it's fill...\n\n  ## Images\n  ![random cool image](https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.XDUweOQ0UMr08MbHOm8laAHaEo%26pid%3DApi&f=1)\n\n  # Things you can do\n  * You can play with **headings** using #\n  * You can test **[links]**(https://www.sethlewandowski.com)\n  * You can play with \\`<div>**code**</div>\\`\n  * And even carriage returns like this \n  * Now you see me \\r now you don't\n\n`;\n\n\nclass App extends React.Component {\n  state={\n    text: initalState,\n  }\n\n  handleChange = (a) =>{\n    this.setState({\n      text: a.target.value,\n    })\n  }\n\n  getMarkdownText() {\n    const rawMarkup = marked(this.state.text, {breaks: true});\n    return { __html: rawMarkup };\n  }\n\n  render() {\n    const {text} = this.state;\n\n    const markdown = marked(text, {sanitize: true});\n  \n    return (\n      <div className=\"App-header\">\n        <div id=\"title\" className=\"col-12\">\n          <h1>Convert Markdown</h1>\n        </div>\n        <div className=\"row\">\n          <div id=\"markdown\" className=\"col-sm-12 col-md-6\">\n            <h3>Enter Markdown</h3>\n            <textarea className=\"form-control\" id=\"editor\" value={text} onChange={this.handleChange}/>\n          </div>\n          <div id=\"result\" className=\"col-sm-12 col-md-6\">\n            <h3>See Result</h3>\n            <div className=\"rounded preview\">\n              <div id=\"preview\" dangerouslySetInnerHTML={this.getMarkdownText()}></div>\n            </div>\n          </div>\n        </div>\n        <p className=\"footer\">by <a href=\"https://www.sethlewandowski.com\">Seth Lewandowski</a></p>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}